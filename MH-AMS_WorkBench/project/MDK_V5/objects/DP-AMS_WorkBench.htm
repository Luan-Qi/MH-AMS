<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\DP-AMS_WorkBench.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\DP-AMS_WorkBench.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Dec 19 21:50:36 2024
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AMCU_run &rArr; AS5600_get_distance_E() &rArr; AS5600::rawAngle() &rArr; AS5600::readReg2(unsigned char) &rArr; AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC1_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC1_CMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_CMP_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from at32f421_int.o(i.BusFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1b]">CRM_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[21]">DMA1_Channel5_4_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from at32f421_int.o(i.DebugMon_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[19]">ERTC_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1e]">EXINT15_4_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1c]">EXINT1_0_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1d]">EXINT3_2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from at32f421_int.o(i.HardFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[31]">I2C1_ERR_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2b]">I2C1_EVT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[32]">I2C2_ERR_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2c]">I2C2_EVT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from at32f421_int.o(i.MemManage_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from at32f421_int.o(i.NMI_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[18]">PVM_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from at32f421_int.o(i.PendSV_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[d]">Reset_Handler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from at32f421_int.o(i.SVC_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from at32f421_int.o(i.SysTick_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[33]">SystemInit</a> from system_at32f421.o(i.SystemInit) referenced from startup_at32f421.o(.text)
 <LI><a href="#[27]">TMR14_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[28]">TMR15_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[29]">TMR16_GLOBAL_IRQHandler</a> from at32f421_int.o(i.TMR16_GLOBAL_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2a]">TMR17_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[23]">TMR1_BRK_OVF_TRG_HALL_IRQHandler</a> from at32f421_int.o(i.TMR1_BRK_OVF_TRG_HALL_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[24]">TMR1_CH_IRQHandler</a> from at32f421_int.o(i.TMR1_CH_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[25]">TMR3_GLOBAL_IRQHandler</a> from at32f421_int.o(i.TMR3_GLOBAL_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[26]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from at32f421_int.o(i.USART1_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from at32f421_int.o(i.USART2_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from at32f421_int.o(i.UsageFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[17]">WWDT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[35]">_filament::_filament()</a> from bambubus.o(i._ZN9_filamentC1Ev) referenced from bambubus.o(i.__sti___12_BambuBus_cpp_crc_16)
 <LI><a href="#[38]">__main</a> from __main.o(!!!main) referenced from startup_at32f421.o(.text)
 <LI><a href="#[37]">__sti___12_BambuBus_cpp_crc_16</a> from bambubus.o(i.__sti___12_BambuBus_cpp_crc_16) referenced from bambubus.o(.init_array)
 <LI><a href="#[36]">__sti___8_AMCU_cpp_as5600</a> from amcu.o(i.__sti___8_AMCU_cpp_as5600) referenced from amcu.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[de]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[df]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e0]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e1]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[41]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3d]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[e7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[46]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ff]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[40]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[100]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[42]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AMCU_run &rArr; AS5600_get_distance_E() &rArr; AS5600::rawAngle() &rArr; AS5600::readReg2(unsigned char) &rArr; AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[101]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[45]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[102]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[47]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel5_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ERTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXINT15_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXINT1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXINT3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR14_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR15_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR17_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f421.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>

<P><STRONG><a name="[103]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_filament(unsigned char*, int)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_send(long_packge_data*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Set_filament(unsigned char*, int)
</UL>

<P><STRONG><a name="[49]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[104]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filament::_filament()
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[3f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[44]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[10e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>AMCU_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, amcu.o(i.AMCU_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AMCU_init &rArr; AS5600_init() &rArr; AS5600::begin(unsigned char) &rArr; IIC_Init() &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_init()
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>AMCU_run</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, amcu.o(i.AMCU_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AMCU_run &rArr; AS5600_get_distance_E() &rArr; AS5600::rawAngle() &rArr; AS5600::readReg2(unsigned char) &rArr; AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now_filament_num
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filament_motion
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_filament_meters
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_set_need_to_save
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_get_distance_E()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_send_run()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_run()
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>BambuBus_init</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, bambubus.o(i.BambuBus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BambuBus_init &rArr; CRC16::reset(unsigned short, unsigned short, unsigned short, bool, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::reset(unsigned short, unsigned short, unsigned short, bool, bool)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::reset(unsigned char, unsigned char, unsigned char, bool, bool)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBUS_UART_Init(unsigned)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_init
</UL>

<P><STRONG><a name="[5a]"></a>BambuBus_run</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, bambubus.o(i.BambuBus_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BambuBus_run &rArr; send_for_long_packge_version(unsigned char*, int) &rArr; Bambubus_long_package_send(long_packge_data*) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time64()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_MC_online(unsigned char*, int)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_filament(unsigned char*, int)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_version(unsigned char*, int)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Set_filament(unsigned char*, int)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packge_type(unsigned char*, int)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_save()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Fxx(unsigned char*, int)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Dxx(unsigned char*, int)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Cxx(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
</UL>

<P><STRONG><a name="[5b]"></a>Bambubus_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bambubus.o(i.Bambubus_read))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_init
</UL>

<P><STRONG><a name="[55]"></a>Bambubus_set_need_to_save</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bambubus.o(i.Bambubus_set_need_to_save))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Set_filament(unsigned char*, int)
</UL>

<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f421_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f421_int.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f421_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SystemInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, system_at32f421.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TMR16_GLOBAL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.TMR16_GLOBAL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_BRK_OVF_TRG_HALL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.TMR1_BRK_OVF_TRG_HALL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.TMR1_CH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.TMR3_GLOBAL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_int.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>USB_debug_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_debug.o(i.USB_debug_init))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>USB_debug_run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_debug.o(i.USB_debug_run))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f421_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>delay_init()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, delay.o(i._Z10delay_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>get_time64()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, time64.o(i._Z10get_time64v))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time64()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[50]"></a>AS5600_init()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, amcu.o(i._Z11AS5600_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AS5600_init() &rArr; AS5600::begin(unsigned char) &rArr; IIC_Init() &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::begin(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_init
</UL>

<P><STRONG><a name="[6c]"></a>set_cxx_buf(unsigned char*, unsigned char*, int)</STRONG> (Thumb, 48 bytes, Stack size 36 bytes, bambubus.o(i._Z11set_cxx_bufPhS_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_cxx_buf(unsigned char*, unsigned char*, int) &rArr; get_filament_left_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filament_left_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Cxx(unsigned char*, int)
</UL>

<P><STRONG><a name="[59]"></a>AMCU_bus_run()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, amcu.o(i._Z12AMCU_bus_runv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AMCU_bus_run() &rArr; AMCU_check_crc16(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_deal_set_motion_res(unsigned char*, int)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_deal_read_stu_res(unsigned char*, int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_check_crc16(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
</UL>

<P><STRONG><a name="[71]"></a>IIC_Wait_Ack()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(i._Z12IIC_Wait_Ackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Wait_Ack() &rArr; IIC_Stop() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_read()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[98]"></a>reverse8bits(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, crcfastreverse.o(i._Z12reverse8bitsh))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::_add(unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::calc() const
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::_add(unsigned char)
</UL>

<P><STRONG><a name="[61]"></a>send_for_Cxx(unsigned char*, int)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bambubus.o(i._Z12send_for_CxxPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_for_Cxx(unsigned char*, int) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cxx_buf(unsigned char*, unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[62]"></a>send_for_Dxx(unsigned char*, int)</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, bambubus.o(i._Z12send_for_DxxPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = send_for_Dxx(unsigned char*, int) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filament_left_char(unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[63]"></a>send_for_Fxx(unsigned char*, int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bambubus.o(i._Z12send_for_FxxPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = send_for_Fxx(unsigned char*, int) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[4f]"></a>AMCU_bus_init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcu.o(i._Z13AMCU_bus_initv))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_init
</UL>

<P><STRONG><a name="[68]"></a>Bambubus_save()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bambubus.o(i._Z13Bambubus_savev))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[79]"></a>IIC_Read_Byte(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, myiic.o(i._Z13IIC_Read_Byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_read()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[7c]"></a>IIC_Send_Byte(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, myiic.o(i._Z13IIC_Send_Byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Send_Byte(unsigned char) &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[9f]"></a>reverse16bits(unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, crcfastreverse.o(i._Z13reverse16bitst))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::calc() const
</UL>

<P><STRONG><a name="[77]"></a>sda_bits_read()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, myiic.o(i._Z13sda_bits_readv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sda_bits_read()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack()
</UL>

<P><STRONG><a name="[58]"></a>debug_send_run()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcu.o(i._Z14debug_send_runv))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
</UL>

<P><STRONG><a name="[75]"></a>scl_bits_write(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, myiic.o(i._Z14scl_bits_writeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scl_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte(unsigned char)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack()
</UL>

<P><STRONG><a name="[73]"></a>sda_bits_write(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, myiic.o(i._Z14sda_bits_writeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack()
</UL>

<P><STRONG><a name="[60]"></a>get_packge_type(unsigned char*, int)</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, bambubus.o(i._Z15get_packge_typePhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_packge_type(unsigned char*, int) &rArr; package_check_crc16(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_analysis(unsigned char*, int, long_packge_data*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_check_crc16(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[6e]"></a>AMCU_check_crc16(unsigned char*, int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, amcu.o(i._Z16AMCU_check_crc16Phi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AMCU_check_crc16(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::calc() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::restart()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_run()
</UL>

<P><STRONG><a name="[5e]"></a>BambuBUS_UART_Init(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bambubus.o(i._Z18BambuBUS_UART_Initj))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_init
</UL>

<P><STRONG><a name="[80]"></a>package_check_crc16(unsigned char*, int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bambubus.o(i._Z19package_check_crc16Phi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = package_check_crc16(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::calc() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::restart()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packge_type(unsigned char*, int)
</UL>

<P><STRONG><a name="[53]"></a>AS5600_get_distance_E()</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, amcu.o(i._Z21AS5600_get_distance_Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AS5600_get_distance_E() &rArr; AS5600::rawAngle() &rArr; AS5600::readReg2(unsigned char) &rArr; AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::rawAngle()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
</UL>

<P><STRONG><a name="[78]"></a>package_send_with_crc(unsigned char*, int)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bambubus.o(i._Z21package_send_with_crcPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::calc() const
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::restart()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::add(unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::calc() const
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::restart()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::add(unsigned char)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uart(const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_send(long_packge_data*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Set_filament(unsigned char*, int)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Fxx(unsigned char*, int)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Dxx(unsigned char*, int)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Cxx(unsigned char*, int)
</UL>

<P><STRONG><a name="[67]"></a>send_for_Set_filament(unsigned char*, int)</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, bambubus.o(i._Z21send_for_Set_filamentPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_for_Set_filament(unsigned char*, int) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_set_need_to_save
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[6d]"></a>get_filament_left_char(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bambubus.o(i._Z22get_filament_left_charh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_filament_left_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_Dxx(unsigned char*, int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cxx_buf(unsigned char*, unsigned char*, int)
</UL>

<P><STRONG><a name="[6f]"></a>AMCU_bus_deal_read_stu_res(unsigned char*, int)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, amcu.o(i._Z26AMCU_bus_deal_read_stu_resPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AMCU_bus_deal_read_stu_res(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filament_online
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_run()
</UL>

<P><STRONG><a name="[91]"></a>Bambubus_long_package_send(long_packge_data*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bambubus.o(i._Z26Bambubus_long_package_sendP16long_packge_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bambubus_long_package_send(long_packge_data*) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_MC_online(unsigned char*, int)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_filament(unsigned char*, int)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_version(unsigned char*, int)
</UL>

<P><STRONG><a name="[70]"></a>AMCU_bus_deal_set_motion_res(unsigned char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amcu.o(i._Z28AMCU_bus_deal_set_motion_resPhi))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_run()
</UL>

<P><STRONG><a name="[66]"></a>send_for_long_packge_version(unsigned char*, int)</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, bambubus.o(i._Z28send_for_long_packge_versionPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_for_long_packge_version(unsigned char*, int) &rArr; Bambubus_long_package_send(long_packge_data*) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_analysis(unsigned char*, int, long_packge_data*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_send(long_packge_data*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[65]"></a>send_for_long_packge_filament(unsigned char*, int)</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, bambubus.o(i._Z29send_for_long_packge_filamentPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_for_long_packge_filament(unsigned char*, int) &rArr; Bambubus_long_package_send(long_packge_data*) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_analysis(unsigned char*, int, long_packge_data*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_send(long_packge_data*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[81]"></a>Bambubus_long_package_analysis(unsigned char*, int, long_packge_data*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bambubus.o(i._Z30Bambubus_long_package_analysisPhiP16long_packge_data))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_MC_online(unsigned char*, int)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_filament(unsigned char*, int)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_for_long_packge_version(unsigned char*, int)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packge_type(unsigned char*, int)
</UL>

<P><STRONG><a name="[64]"></a>send_for_long_packge_MC_online(unsigned char*, int)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, bambubus.o(i._Z30send_for_long_packge_MC_onlinePhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_for_long_packge_MC_online(unsigned char*, int) &rArr; Bambubus_long_package_send(long_packge_data*) &rArr; package_send_with_crc(unsigned char*, int) &rArr; CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_analysis(unsigned char*, int, long_packge_data*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bambubus_long_package_send(long_packge_data*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_run
</UL>

<P><STRONG><a name="[72]"></a>SDA_IN()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, myiic.o(i._Z6SDA_INv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack()
</UL>

<P><STRONG><a name="[7b]"></a>IIC_Ack()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, myiic.o(i._Z7IIC_Ackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Ack() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte(unsigned char)
</UL>

<P><STRONG><a name="[7d]"></a>SDA_OUT()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, myiic.o(i._Z7SDA_OUTv))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte(unsigned char)
</UL>

<P><STRONG><a name="[92]"></a>IIC_Init()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, myiic.o(i._Z8IIC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Init() &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::begin(unsigned char)
</UL>

<P><STRONG><a name="[7a]"></a>IIC_NAck()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, myiic.o(i._Z8IIC_NAckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte(unsigned char)
</UL>

<P><STRONG><a name="[76]"></a>IIC_Stop()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, myiic.o(i._Z8IIC_Stopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Stop() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack()
</UL>

<P><STRONG><a name="[74]"></a>delay_us(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i._Z8delay_usj))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte(unsigned char)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack()
</UL>

<P><STRONG><a name="[96]"></a>IIC_Start()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, myiic.o(i._Z9IIC_Startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Start() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[8e]"></a>send_uart(const unsigned char*, unsigned short)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bambubus.o(i._Z9send_uartPKht))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
</UL>

<P><STRONG><a name="[8c]"></a>CRC8::add(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, crc8.o(i._ZN4CRC83addEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC8::add(unsigned char) &rArr; CRC8::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::_add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
</UL>

<P><STRONG><a name="[97]"></a>CRC8::_add(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, crc8.o(i._ZN4CRC84_addEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC8::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse8bits(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::add(unsigned char)
</UL>

<P><STRONG><a name="[5c]"></a>CRC8::reset(unsigned char, unsigned char, unsigned char, bool, bool)</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, crc8.o(i._ZN4CRC85resetEhhhbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC8::reset(unsigned char, unsigned char, unsigned char, bool, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::restart()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_init
</UL>

<P><STRONG><a name="[8b]"></a>CRC8::restart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crc8.o(i._ZN4CRC87restartEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::reset(unsigned char, unsigned char, unsigned char, bool, bool)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
</UL>

<P><STRONG><a name="[a1]"></a>CRC8::CRC8(unsigned char, unsigned char, unsigned char, bool, bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, crc8.o(i._ZN4CRC8C1Ehhhbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC8::CRC8(unsigned char, unsigned char, unsigned char, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_AMCU_cpp_as5600
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_BambuBus_cpp_crc_16
</UL>

<P><STRONG><a name="[111]"></a>CRC8::CRC8__sub_object(unsigned char, unsigned char, unsigned char, bool, bool)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, crc8.o(i._ZN4CRC8C1Ehhhbb), UNUSED)

<P><STRONG><a name="[83]"></a>CRC16::add(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, crc16.o(i._ZN5CRC163addEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CRC16::add(unsigned char) &rArr; CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::_add(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_check_crc16(unsigned char*, int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_check_crc16(unsigned char*, int)
</UL>

<P><STRONG><a name="[99]"></a>CRC16::_add(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, crc16.o(i._ZN5CRC164_addEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16::_add(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse8bits(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::add(unsigned char)
</UL>

<P><STRONG><a name="[5d]"></a>CRC16::reset(unsigned short, unsigned short, unsigned short, bool, bool)</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, crc16.o(i._ZN5CRC165resetEtttbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16::reset(unsigned short, unsigned short, unsigned short, bool, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::restart()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BambuBus_init
</UL>

<P><STRONG><a name="[82]"></a>CRC16::restart()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crc16.o(i._ZN5CRC167restartEv))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::reset(unsigned short, unsigned short, unsigned short, bool, bool)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_check_crc16(unsigned char*, int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_check_crc16(unsigned char*, int)
</UL>

<P><STRONG><a name="[a0]"></a>CRC16::CRC16(unsigned short, unsigned short, unsigned short, bool, bool)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, crc16.o(i._ZN5CRC16C1Etttbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16::CRC16(unsigned short, unsigned short, unsigned short, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_AMCU_cpp_as5600
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_BambuBus_cpp_crc_16
</UL>

<P><STRONG><a name="[112]"></a>CRC16::CRC16__sub_object(unsigned short, unsigned short, unsigned short, bool, bool)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, crc16.o(i._ZN5CRC16C1Etttbb), UNUSED)

<P><STRONG><a name="[9c]"></a>AS5600::isConnected()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, as5600.o(i._ZN6AS560011isConnectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::begin(unsigned char)
</UL>

<P><STRONG><a name="[9a]"></a>AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, as5600.o(i._ZN6AS560012AS5600_Read8EhhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte(unsigned char)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte(unsigned char)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::readReg2(unsigned char)
</UL>

<P><STRONG><a name="[9b]"></a>AS5600::setDirection(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, as5600.o(i._ZN6AS560012setDirectionEh))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::begin(unsigned char)
</UL>

<P><STRONG><a name="[6b]"></a>AS5600::begin(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, as5600.o(i._ZN6AS56005beginEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AS5600::begin(unsigned char) &rArr; IIC_Init() &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::setDirection(unsigned char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::isConnected()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_init()
</UL>

<P><STRONG><a name="[85]"></a>AS5600::rawAngle()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, as5600.o(i._ZN6AS56008rawAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AS5600::rawAngle() &rArr; AS5600::readReg2(unsigned char) &rArr; AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::readReg2(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_get_distance_E()
</UL>

<P><STRONG><a name="[9d]"></a>AS5600::readReg2(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, as5600.o(i._ZN6AS56008readReg2Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AS5600::readReg2(unsigned char) &rArr; AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600::rawAngle()
</UL>

<P><STRONG><a name="[35]"></a>_filament::_filament()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bambubus.o(i._ZN9_filamentC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _filament::_filament() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bambubus.o(i.__sti___12_BambuBus_cpp_crc_16)
</UL>
<P><STRONG><a name="[113]"></a>_filament::_filament__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bambubus.o(i._ZN9_filamentC1Ev), UNUSED)

<P><STRONG><a name="[8d]"></a>CRC8::calc() const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, crc8.o(i._ZNK4CRC84calcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC8::calc() const
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse8bits(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
</UL>

<P><STRONG><a name="[84]"></a>CRC16::calc() const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, crc16.o(i._ZNK5CRC164calcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16::calc() const
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse16bits(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_send_with_crc(unsigned char*, int)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;package_check_crc16(unsigned char*, int)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_check_crc16(unsigned char*, int)
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_BambuBus_cpp_crc_16
</UL>

<P><STRONG><a name="[57]"></a>add_filament_meters</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bambubus.o(i.add_filament_meters))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
</UL>

<P><STRONG><a name="[bd]"></a>crm_ahb_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[bf]"></a>crm_apb1_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[be]"></a>crm_apb2_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[c0]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[ba]"></a>crm_clock_source_enable</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[a3]"></a>crm_clocks_freq_get</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, at32f421_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[bb]"></a>crm_flag_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32f421_crm.o(i.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[93]"></a>crm_periph_clock_enable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f421_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_periph_clock_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init()
</UL>

<P><STRONG><a name="[bc]"></a>crm_pll_config</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, at32f421_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[b9]"></a>crm_reset</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[c1]"></a>crm_sysclk_switch</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[a4]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[56]"></a>get_filament_motion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bambubus.o(i.get_filament_motion))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
</UL>

<P><STRONG><a name="[54]"></a>get_now_filament_num</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bambubus.o(i.get_now_filament_num))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
</UL>

<P><STRONG><a name="[b3]"></a>gpio_bits_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f421_gpio.o(i.gpio_bits_reset))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
</UL>

<P><STRONG><a name="[7f]"></a>gpio_bits_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_gpio.o(i.gpio_bits_write))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_write(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scl_bits_write(unsigned char)
</UL>

<P><STRONG><a name="[94]"></a>gpio_default_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f421_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init()
</UL>

<P><STRONG><a name="[95]"></a>gpio_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, at32f421_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init()
</UL>

<P><STRONG><a name="[7e]"></a>gpio_input_data_bit_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_gpio.o(i.gpio_input_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sda_bits_read()
</UL>

<P><STRONG><a name="[c2]"></a>gpio_pin_mux_config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, at32f421_gpio.o(i.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; AMCU_run &rArr; AS5600_get_distance_E() &rArr; AS5600::rawAngle() &rArr; AS5600::readReg2(unsigned char) &rArr; AS5600::AS5600_Read8(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; IIC_Read_Byte(unsigned char) &rArr; IIC_NAck() &rArr; sda_bits_write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_debug_run
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_debug_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_periph_clock_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b8]"></a>nvic_irq_enable</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, at32f421_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[b4]"></a>nvic_priority_group_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f421_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[90]"></a>set_filament_online</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bambubus.o(i.set_filament_online))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMCU_bus_deal_read_stu_res(unsigned char*, int)
</UL>

<P><STRONG><a name="[b1]"></a>system_core_clock_update</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, system_at32f421.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[6a]"></a>systick_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f421_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init()
</UL>

<P><STRONG><a name="[c3]"></a>tmr_base_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_base_init))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[cc]"></a>tmr_brkdt_config</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_brkdt_config))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[c9]"></a>tmr_channel_value_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_channel_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[c5]"></a>tmr_clock_source_div_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_clock_source_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[c4]"></a>tmr_cnt_dir_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_cnt_dir_set))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[ce]"></a>tmr_counter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_counter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[ca]"></a>tmr_output_channel_buffer_enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at32f421_tmr.o(i.tmr_output_channel_buffer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_output_channel_buffer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[c8]"></a>tmr_output_channel_config</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, at32f421_tmr.o(i.tmr_output_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tmr_output_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[cb]"></a>tmr_output_channel_immediately_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at32f421_tmr.o(i.tmr_output_channel_immediately_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_output_channel_immediately_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[cd]"></a>tmr_output_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_output_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[c7]"></a>tmr_period_buffer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_period_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[d0]"></a>tmr_primary_mode_select</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_primary_mode_select))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
</UL>

<P><STRONG><a name="[c6]"></a>tmr_repetition_counter_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_repetition_counter_set))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr16_init
</UL>

<P><STRONG><a name="[cf]"></a>tmr_sub_sync_mode_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_tmr.o(i.tmr_sub_sync_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr3_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_tmr1_init
</UL>

<P><STRONG><a name="[d5]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[d4]"></a>usart_hardware_flow_control_set</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, at32f421_usart.o(i.usart_hardware_flow_control_set))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[b2]"></a>usart_init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, at32f421_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[d3]"></a>usart_parity_selection_config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, at32f421_usart.o(i.usart_parity_selection_config))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[d2]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[d1]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart2_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[ab]"></a>wk_gpio_config</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, at32f421_wk_config.o(i.wk_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wk_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>wk_nvic_config</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, at32f421_wk_config.o(i.wk_nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wk_nvic_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to at32f421_wk_config_c]::__NVIC_GetPriorityGrouping()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to at32f421_wk_config_c]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to at32f421_wk_config_c]::__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>wk_periph_clock_config</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, at32f421_wk_config.o(i.wk_periph_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wk_periph_clock_config &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>wk_system_clock_config</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, at32f421_wk_config.o(i.wk_system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wk_system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>wk_tmr16_init</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, at32f421_wk_config.o(i.wk_tmr16_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wk_tmr16_init &rArr; tmr_output_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_repetition_counter_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_period_buffer_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_immediately_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_buffer_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cnt_dir_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_clock_source_div_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_value_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_brkdt_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>wk_tmr1_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, at32f421_wk_config.o(i.wk_tmr1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wk_tmr1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_sub_sync_mode_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_repetition_counter_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_primary_mode_select
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_period_buffer_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cnt_dir_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_clock_source_div_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>wk_tmr3_init</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, at32f421_wk_config.o(i.wk_tmr3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wk_tmr3_init &rArr; tmr_output_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_sub_sync_mode_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_primary_mode_select
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_period_buffer_enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_immediately_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_buffer_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cnt_dir_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_clock_source_div_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_value_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>wk_usart1_init</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, at32f421_wk_config.o(i.wk_usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wk_usart1_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_control_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>wk_usart2_init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, at32f421_wk_config.o(i.wk_usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wk_usart2_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_control_set
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_get_distance_E()
</UL>

<P><STRONG><a name="[d6]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_get_distance_E()
</UL>

<P><STRONG><a name="[d9]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_get_distance_E()
</UL>

<P><STRONG><a name="[db]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d8]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[da]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_get_distance_E()
</UL>

<P><STRONG><a name="[dc]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_get_distance_E()
</UL>

<P><STRONG><a name="[114]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[dd]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[d7]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b7]"></a>[local to at32f421_wk_config_c]::__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at32f421_wk_config.o(i._ZN42_INTERNAL_20_at32f421_wk_config_c_7d0838b118__NVIC_SetPriorityE4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to at32f421_wk_config_c]::__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[b6]"></a>[local to at32f421_wk_config_c]::NVIC_EncodePriority(unsigned, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, at32f421_wk_config.o(i._ZN42_INTERNAL_20_at32f421_wk_config_c_7d0838b119NVIC_EncodePriorityEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to at32f421_wk_config_c]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[b5]"></a>[local to at32f421_wk_config_c]::__NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_wk_config.o(i._ZN42_INTERNAL_20_at32f421_wk_config_c_7d0838b126__NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[36]"></a>__sti___8_AMCU_cpp_as5600</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, amcu.o(i.__sti___8_AMCU_cpp_as5600))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___8_AMCU_cpp_as5600 &rArr; CRC16::CRC16(unsigned short, unsigned short, unsigned short, bool, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::CRC16(unsigned short, unsigned short, unsigned short, bool, bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::CRC8(unsigned char, unsigned char, unsigned char, bool, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcu.o(.init_array)
</UL>
<P><STRONG><a name="[37]"></a>__sti___12_BambuBus_cpp_crc_16</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bambubus.o(i.__sti___12_BambuBus_cpp_crc_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___12_BambuBus_cpp_crc_16 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16::CRC16(unsigned short, unsigned short, unsigned short, bool, bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8::CRC8(unsigned char, unsigned char, unsigned char, bool, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bambubus.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
